"""
Django settings for core project.

Generated by 'django-admin startproject' using Django 5.2.3.

For more information on this file, see
https://docs.djangoproject.com/en/5.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.2/ref/settings/
"""

import os
from pathlib import Path
from datetime import timedelta
from dotenv import load_dotenv
import sys
# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

# Load environment variables
load_dotenv()

# ============================================================================
# SECURITY SETTINGS
# ============================================================================

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.getenv('SECRET_KEY', 'django-insecure-pyrjl6w523v7mvo!^(wa%=@gf0t2*ysh4a+!s7*$zj=eplntnn')

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = os.getenv('DEBUG', 'True').lower() == 'true'

ALLOWED_HOSTS = os.getenv('ALLOWED_HOSTS', '*').split(',')

# ============================================================================
# APPLICATION DEFINITION
# ============================================================================

DJANGO_APPS = [
    'jazzmin',
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
]

THIRD_PARTY_APPS = [
    'health_check',
    'health_check.db',
    'health_check.cache',
    'health_check.storage',
    'rest_framework',
    'rest_framework_docs',
    'rest_framework_simplejwt',
    'rest_framework_simplejwt.token_blacklist',
    'drf_yasg',
    'corsheaders',
    'django_filters',
    'django_celery_results',
    
]

LOCAL_APPS = [
    'base',
]

INSTALLED_APPS = DJANGO_APPS + THIRD_PARTY_APPS + LOCAL_APPS

# Custom user model
AUTH_USER_MODEL = 'base.User'

# ============================================================================
# MIDDLEWARE CONFIGURATION
# ============================================================================

MIDDLEWARE = [
    'corsheaders.middleware.CorsMiddleware',
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

# ============================================================================
# URL CONFIGURATION
# ============================================================================

ROOT_URLCONF = 'core.urls'

# ============================================================================
# TEMPLATES CONFIGURATION
# ============================================================================

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

# ============================================================================
# WSGI CONFIGURATION
# ============================================================================

WSGI_APPLICATION = 'core.wsgi.application'

# ============================================================================
# DATABASE CONFIGURATION
# ============================================================================

DATABASES = {
    'default': {
        'ENGINE': os.getenv('DB_ENGINE', 'django.db.backends.sqlite3'),
        'NAME': os.getenv('DB_NAME', BASE_DIR / 'db.sqlite3'),
        'USER': os.getenv('DB_USER', ''),
        'PASSWORD': os.getenv('DB_PASSWORD', ''),
        'HOST': os.getenv('DB_HOST', ''),
        'PORT': os.getenv('DB_PORT', ''),
    }
}

# ============================================================================
# PASSWORD VALIDATION
# ============================================================================

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

# ============================================================================
# INTERNATIONALIZATION
# ============================================================================
LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'America/New_York'
USE_I18N = True
USE_TZ = True


# STATIC FILES CONFIGURATION
# ============================================================================

STATIC_URL = '/static/'
STATIC_ROOT = BASE_DIR / 'staticfiles'

MEDIA_URL = '/media/'
MEDIA_ROOT = BASE_DIR / 'media'

# ============================================================================
# DEFAULT PRIMARY KEY FIELD TYPE
# ============================================================================

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# ============================================================================
# REST FRAMEWORK CONFIGURATION
# ============================================================================

REST_FRAMEWORK = {
    'DEFAULT_AUTHENTICATION_CLASSES': [
        'rest_framework_simplejwt.authentication.JWTAuthentication',
        'rest_framework.authentication.SessionAuthentication',
    ],
    'DEFAULT_PERMISSION_CLASSES': [
        'rest_framework.permissions.IsAuthenticated',
    ],
    'DEFAULT_RENDERER_CLASSES': [
        'rest_framework.renderers.JSONRenderer',
        'rest_framework.renderers.BrowsableAPIRenderer',
    ],
    'DEFAULT_PARSER_CLASSES': [
        'rest_framework.parsers.JSONParser',
        'rest_framework.parsers.FormParser',
        'rest_framework.parsers.MultiPartParser',
    ],
    'DEFAULT_FILTER_BACKENDS': [
        'django_filters.rest_framework.DjangoFilterBackend',
        'rest_framework.filters.SearchFilter',
        'rest_framework.filters.OrderingFilter',
    ],
    'DEFAULT_PAGINATION_CLASS': 'base.pagination.StandardResultsSetPagination',
    'PAGE_SIZE': 20,
    'DEFAULT_THROTTLE_CLASSES': [
        'rest_framework.throttling.AnonRateThrottle',
        'rest_framework.throttling.UserRateThrottle'
    ],
    'DEFAULT_THROTTLE_RATES': {
        'anon': '100/hour',
        'user': '1000/hour'
    },
    'EXCEPTION_HANDLER': 'rest_framework.views.exception_handler',
    'TEST_REQUEST_DEFAULT_FORMAT': 'json',
}

# ============================================================================
# JWT CONFIGURATION
# ============================================================================

SIMPLE_JWT = {
    'ACCESS_TOKEN_LIFETIME': timedelta(minutes=60),
    'REFRESH_TOKEN_LIFETIME': timedelta(days=7),
    'ROTATE_REFRESH_TOKENS': True,
    'BLACKLIST_AFTER_ROTATION': True,
    'UPDATE_LAST_LOGIN': True,
    
    'ALGORITHM': 'HS256',
    'SIGNING_KEY': SECRET_KEY,
    'VERIFYING_KEY': None,
    'AUDIENCE': None,
    'ISSUER': None,
    'JWK_URL': None,
    'LEEWAY': 0,
    
    'AUTH_HEADER_TYPES': ('Bearer',),
    'AUTH_HEADER_NAME': 'HTTP_AUTHORIZATION',
    'USER_ID_FIELD': 'id',
    'USER_ID_CLAIM': 'user_id',
    'USER_AUTHENTICATION_RULE': 'rest_framework_simplejwt.authentication.default_user_authentication_rule',
    
    'AUTH_TOKEN_CLASSES': ('rest_framework_simplejwt.tokens.AccessToken',),
    'TOKEN_TYPE_CLAIM': 'token_type',
    'TOKEN_USER_CLASS': 'rest_framework_simplejwt.models.TokenUser',
    
    'JTI_CLAIM': 'jti',
    
    'SLIDING_TOKEN_REFRESH_EXP_CLAIM': 'refresh_exp',
    'SLIDING_TOKEN_LIFETIME': timedelta(minutes=5),
    'SLIDING_TOKEN_REFRESH_LIFETIME': timedelta(days=1),
}

# ============================================================================
# CORS CONFIGURATION
# ============================================================================
CORS_ALLOWED_ORIGINS = [
    "http://localhost:3000",
    "http://127.0.0.1:3000",
    "http://localhost:8000",
    "http://127.0.0.1:8000",
    "https://powerball.asitechsolution.com",  # ðŸ”¥ Domaine ajoutÃ© pour la prod
    "https://david-git-main-emmanuel-agbotoedos-projects.vercel.app",

]

CORS_ALLOW_CREDENTIALS = True

CORS_ALLOW_HEADERS = [
    'accept',
    'accept-encoding',
    'authorization',
    'content-type',
    'dnt',
    'origin',
    'user-agent',
    'x-csrftoken',
    'x-requested-with',
]

# ============================================================================
# SWAGGER/API DOCUMENTATION CONFIGURATION
# ============================================================================

SWAGGER_SETTINGS = {
    'SECURITY_DEFINITIONS': {
        'Bearer': {
            'type': 'apiKey',
            'name': 'Authorization',
            'in': 'header'
        }
    },
    'USE_SESSION_AUTH': False,
    'JSON_EDITOR': True,
    'SUPPORTED_SUBMIT_METHODS': [
        'get',
        'post',
        'put',
        'delete',
        'patch'
    ],
}

REDOC_SETTINGS = {
    'LAZY_RENDERING': False,
}

# ============================================================================
# CACHE CONFIGURATION
# ============================================================================

CACHES = {
    'default': {
        'BACKEND': 'django_redis.cache.RedisCache',
        'LOCATION': os.getenv('REDIS_URL', 'redis://127.0.0.1:6379/1'),
        'OPTIONS': {
            'CLIENT_CLASS': 'django_redis.client.DefaultClient',
        }
    }
}

# Cache TTL settings
CACHE_TTL = {
    'DASHBOARD': 30,      # 30 seconds
    'LOTTERY_STATE': 60,  # 1 minute
    'TOKEN_BALANCES': 300, # 5 minutes
    'STATS': 600,         # 10 minutes
}

# ============================================================================
# CELERY CONFIGURATION
# ============================================================================
CELERY_BROKER_URL = 'django-db'
CELERY_RESULT_BACKEND = 'django-db'

CELERY_ACCEPT_CONTENT = ['json']
CELERY_TASK_SERIALIZER = 'json'
CELERY_RESULT_SERIALIZER = 'json'
CELERY_TIMEZONE = 'UTC'

# Celery Beat Schedule
CELERY_BEAT_SCHEDULE = {
    'hourly-lottery-check': {
        'task': 'base.tasks.check_hourly_lottery',
        'schedule': 60.0,  # Check every minute
    },
    'daily-lottery-check': {
        'task': 'base.tasks.check_daily_lottery',
        'schedule': 300.0,  # Check every 5 minutes
    },
    'update-token-balances': {
        'task': 'base.tasks.update_all_token_balances',
        'schedule': 600.0,  # Update every 10 minutes
    },
    'sync-transactions': {
        'task': 'base.tasks.sync_recent_transactions',
        'schedule': 120.0,  # Sync every 2 minutes
    },
    'update-jackpot-pools': {
        'task': 'base.tasks.update_jackpot_pools',
        'schedule': 30.0,  # Update every 30 seconds
    },
}

# ============================================================================
# SOLANA CONFIGURATION
# ============================================================================

# Solana RPC Configuration
SOLANA_RPC_URL = os.getenv('SOLANA_RPC_URL', 'https://api.devnet.solana.com')
SOLANA_PROGRAM_ID = os.getenv('SOLANA_PROGRAM_ID', '2wqFWNXDYT2Q71ToNFBqKpV4scKSi1cjMuqVcT2jgruV')
SOLANA_COMMITMENT = os.getenv('SOLANA_COMMITMENT', 'confirmed')

# Admin Keys
SOLANA_ADMIN_PUBLIC_KEY = os.getenv('SOLANA_ADMIN_PUBLIC_KEY', '2CSmvU5PVMpQ2B4RPSWhYgrmNAsVtiiaxQhERHWHUnBC')
SOLANA_ADMIN_PRIVATE_KEY = os.getenv('SOLANA_ADMIN_PRIVATE_KEY', '[126,22,24,159,87,113,211,58,127,27,44,86,232,214,211,165,115,168,193,115,116,46,11,215,9,25,73,106,132,165,131,45,223,77,209,89,87,22,196,70,196,222,197,81,53,243,28,63,234,70,137,82,169,123,98,247,128,57,169,228,101,48,66,58]')

# Token Configuration
BALL_TOKEN_MINT = os.getenv('BALL_TOKEN_MINT', '7gRCovtjCRPPHRdz22BTZX2WrjJSe9CgMxxfDshjemx9')

# ============================================================================
# LOTTERY CONFIGURATION
# ============================================================================

LOTTERY_CONFIG = {
    "HOURLY_JACKPOT_PERCENTAGE": int(os.getenv('HOURLY_JACKPOT_PERCENTAGE', '10')),  # 10% of purchases
   
    "DAILY_JACKPOT_PERCENTAGE": int(os.getenv('DAILY_JACKPOT_PERCENTAGE', '5')),   # 5% of purchases
    "MIN_TICKETS_FOR_ELIGIBILITY": int(os.getenv('MIN_TICKETS_FOR_ELIGIBILITY', '1')),
    "TICKETS_PER_10K_BALL": int(os.getenv('TICKETS_PER_10K_BALL', '1')),
    "HOURLY_DRAW_INTERVAL": int(os.getenv('HOURLY_DRAW_INTERVAL', '3600')),    # 1 hour in seconds
    "DAILY_DRAW_INTERVAL": int(os.getenv('DAILY_DRAW_INTERVAL', '86400')),    # 24 hours in seconds
}

# ============================================================================
# LOGGING CONFIGURATION
# ============================================================================

# Create logs directory if it doesn't exist
LOGS_DIR = BASE_DIR / 'logs'
LOGS_DIR.mkdir(exist_ok=True)

LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'formatters': {
        'verbose': {
            'format': '{levelname} {asctime} {module} {process:d} {thread:d} {message}',
            'style': '{',
        },
        'simple': {
            'format': '{levelname} {message}',
            'style': '{',
        },
        'detailed': {
            'format': '[{asctime}] {levelname} {name} {module}.{funcName}:{lineno} - {message}',
            'style': '{',
            'datefmt': '%Y-%m-%d %H:%M:%S',
        },
    },
    'handlers': {
        'file': {
            'level': 'INFO',
            'class': 'logging.handlers.RotatingFileHandler',
            'filename': str(LOGS_DIR / 'lottery.log'),
            'maxBytes': 1024*1024*15,  # 15MB
            'backupCount': 10,
            'formatter': 'verbose',
        },
        'console': {
            'level': 'DEBUG' if DEBUG else 'INFO',
            'class': 'logging.StreamHandler',
            'formatter': 'simple',
        },
        'error_file': {
            'level': 'ERROR',
            'class': 'logging.handlers.RotatingFileHandler',
            'filename': str(LOGS_DIR / 'error.log'),
            'maxBytes': 1024*1024*15,  # 15MB
            'backupCount': 10,
            'formatter': 'detailed',
        },
    },
    'root': {
        'level': 'INFO',
        'handlers': ['console'],
    },
    'loggers': {
        'django': {
            'handlers': ['console', 'file'],
            'level': 'INFO',
            'propagate': False,
        },
        'base': {
            'handlers': ['console', 'file', 'error_file'],
            'level': 'INFO',
            'propagate': False,
        },
        'solana': {
            'handlers': ['console', 'file', 'error_file'],
            'level': 'DEBUG' if DEBUG else 'INFO',
            'propagate': False,
        },
        'celery': {
            'handlers': ['console', 'file'],
            'level': 'INFO',
            'propagate': False,
        },
        'rest_framework': {
            'handlers': ['console', 'file'],
            'level': 'DEBUG' if DEBUG else 'INFO',
            'propagate': False,
        },
    },
}

# ============================================================================
# HEALTH CHECK CONFIGURATION
# ============================================================================

HEALTH_CHECK = {
    'DISK_USAGE_MAX': 90,  # percent
    'MEMORY_MIN': 100,    # in MB
}

# ============================================================================
# EMAIL CONFIGURATION
# ============================================================================

EMAIL_BACKEND = os.getenv('EMAIL_BACKEND', 'django.core.mail.backends.console.EmailBackend')
EMAIL_HOST = os.getenv('EMAIL_HOST', 'localhost')
EMAIL_PORT = int(os.getenv('EMAIL_PORT', '587'))
EMAIL_USE_TLS = os.getenv('EMAIL_USE_TLS', 'True').lower() == 'true'
EMAIL_HOST_USER = os.getenv('EMAIL_HOST_USER', '')
EMAIL_HOST_PASSWORD = os.getenv('EMAIL_HOST_PASSWORD', '')
DEFAULT_FROM_EMAIL = os.getenv('DEFAULT_FROM_EMAIL', 'noreply@lottery-solana.com')

# ============================================================================
# SECURITY SETTINGS (Production)
# ============================================================================

if not DEBUG:
    # HTTPS Settings
    SECURE_SSL_REDIRECT = True
    SECURE_PROXY_SSL_HEADER = ('HTTP_X_FORWARDED_PROTO', 'https')
    
    # HSTS Settings
    SECURE_HSTS_SECONDS = 31536000  # 1 year
    SECURE_HSTS_INCLUDE_SUBDOMAINS = True
    SECURE_HSTS_PRELOAD = True
    
    # Cookie Settings
    SESSION_COOKIE_SECURE = True
    CSRF_COOKIE_SECURE = True
    SESSION_COOKIE_HTTPONLY = True
    CSRF_COOKIE_HTTPONLY = True
    
    # Content Security
    SECURE_CONTENT_TYPE_NOSNIFF = True
    SECURE_BROWSER_XSS_FILTER = True
    X_FRAME_OPTIONS = 'DENY'
    
    # Referrer Policy
    SECURE_REFERRER_POLICY = 'strict-origin-when-cross-origin'

# ============================================================================
# CUSTOM SETTINGS
# ============================================================================

# API Rate Limiting
API_RATE_LIMIT = {
    'BURST': 60,
    'SUSTAINED': 1000,
    'WINDOW': 3600,  # 1 hour
}

# File Upload Settings
FILE_UPLOAD_MAX_MEMORY_SIZE = 5242880  # 5MB
DATA_UPLOAD_MAX_MEMORY_SIZE = 5242880  # 5MB
DATA_UPLOAD_MAX_NUMBER_FIELDS = 1000

# Session Settings
SESSION_COOKIE_AGE = 86400  # 24 hours
SESSION_SAVE_EVERY_REQUEST = True
SESSION_EXPIRE_AT_BROWSER_CLOSE = False

# ============================================================================
# DEVELOPMENT SETTINGS
# ============================================================================

if DEBUG:
    # Debug Toolbar (if installed)
    try:
        import debug_toolbar
        INSTALLED_APPS.append('debug_toolbar')
        MIDDLEWARE.insert(0, 'debug_toolbar.middleware.DebugToolbarMiddleware')
        
        DEBUG_TOOLBAR_CONFIG = {
            'SHOW_TOOLBAR_CALLBACK': lambda request: True,
        }
        
        INTERNAL_IPS = [
            '127.0.0.1',
            'localhost',
        ]
    except ImportError:
        pass
    
    # Development email backend
    EMAIL_BACKEND = 'django.core.mail.backends.console.EmailBackend'
    
    # Disable cache in development
    CACHES['default']['BACKEND'] = 'django.core.cache.backends.dummy.DummyCache'

# ============================================================================
# TESTING SETTINGS
# ============================================================================

if 'test' in sys.argv or 'pytest' in sys.modules:
    # Use in-memory database for tests
    DATABASES['default'] = {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': ':memory:',
    }
    
    # Disable migrations for faster tests
    class DisableMigrations:
        def __contains__(self, item):
            return True
        
        def __getitem__(self, item):
            return None
    
    MIGRATION_MODULES = DisableMigrations()
    
    # Use dummy cache for tests
    CACHES['default']['BACKEND'] = 'django.core.cache.backends.dummy.DummyCache'
    
    # Disable Celery for tests
    CELERY_TASK_ALWAYS_EAGER = True
    CELERY_TASK_EAGER_PROPAGATES = True
    
    # Faster password hashing for tests
    PASSWORD_HASHERS = [
        'django.contrib.auth.hashers.MD5PasswordHasher',
    ]

# ============================================================================
# ENVIRONMENT SPECIFIC OVERRIDES
# ============================================================================

# Load environment-specific settings
ENVIRONMENT = os.getenv('ENVIRONMENT', 'development')

if ENVIRONMENT == 'production':
    try:
        from .settings_production import *
    except ImportError:
        pass
elif ENVIRONMENT == 'staging':
    try:
        from .settings_staging import *
    except ImportError:
        pass
elif ENVIRONMENT == 'testing':
    try:
        from .settings_testing import *
    except ImportError:
        pass

# ============================================================================
# FINAL IMPORTS AND VALIDATIONS
# ============================================================================

import sys

# Validate required environment variables in production
if not DEBUG:
    required_env_vars = [
        'SECRET_KEY',
        'SOLANA_ADMIN_PRIVATE_KEY',
        'BALL_TOKEN_MINT',
    ]
    
    missing_vars = [var for var in required_env_vars if not os.getenv(var)]
    if missing_vars:
        raise ValueError(f"Missing required environment variables: {', '.join(missing_vars)}")

# Ensure logs directory exists
os.makedirs(BASE_DIR / 'logs', exist_ok=True)

# Print configuration summary in debug mode
if DEBUG:
    print("=" * 50)
    print("LOTTERY SOLANA - CONFIGURATION SUMMARY")
    print("=" * 50)
    print(f"Environment: {ENVIRONMENT}")
    print(f"Debug Mode: {DEBUG}")
    print(f"Database: {DATABASES['default']['ENGINE']}")
    print(f"Cache Backend: {CACHES['default']['BACKEND']}")
    print(f"Solana RPC: {SOLANA_RPC_URL}")
    print(f"Solana Program ID: {SOLANA_PROGRAM_ID}")
    print(f"Celery Broker: {CELERY_BROKER_URL}")
    print("=" * 50)



# ðŸ”¹ PRODUCTION: Configuration des tÃ¢ches pÃ©riodiques
# Ã€ ajouter dans settings.py ou celery.py :
"""
CELERY_BEAT_SCHEDULE = {
    'sync-lottery-state': {
        'task': 'base.tasks.sync_lottery_state',
        'schedule': 60.0,  # Chaque minute
    },
    'create-scheduled-lotteries': {
        'task': 'base.tasks.create_scheduled_lotteries',
        'schedule': 300.0,  # Toutes les 5 minutes
    },
    'execute-pending-lotteries': {
        'task': 'base.tasks.execute_pending_lotteries',
        'schedule': 60.0,  # Chaque minute
    },
    'process-pending-payouts': {
        'task': 'base.tasks.process_pending_payouts',
        'schedule': 120.0,  # Toutes les 2 minutes
    },
    'monitor-blockchain-events': {
        'task': 'base.tasks.monitor_blockchain_events',
        'schedule': 180.0,  # Toutes les 3 minutes
    },
    'health-check': {
        'task': 'base.tasks.health_check',
        'schedule': 300.0,  # Toutes les 5 minutes
    },
    'update-jackpot-pools': {
        'task': 'base.tasks.update_jackpot_pools',
        'schedule': 120.0,  # Toutes les 2 minutes
    },
    'sync-participant-holdings': {
        'task': 'base.tasks.sync_participant_holdings',
        'schedule': 600.0,  # Toutes les 10 minutes
    },
    'cleanup-old-data': {
        'task': 'base.tasks.cleanup_old_data',
        'schedule': crontab(hour=2, minute=0),  # Tous les jours Ã  2h
    },
    'generate-lottery-reports': {
        'task': 'base.tasks.generate_lottery_reports',
        'schedule': crontab(hour=1, minute=0),  # Tous les jours Ã  1h
    },
    'validate-blockchain-consistency': {
        'task': 'base.tasks.validate_blockchain_consistency',
        'schedule': 900.0,  # Toutes les 15 minutes
    },
    'emergency-system-check': {
        'task': 'base.tasks.emergency_system_check',
        'schedule': 1800.0,  # Toutes les 30 minutes
    },
    'backup-critical-data': {
        'task': 'base.tasks.backup_critical_data',
        'schedule': crontab(hour=0, minute=0),  # Tous les jours Ã  minuit
    },
    'continuous-monitoring': {
        'task': 'base.tasks.continuous_monitoring',
        'schedule': 1800.0,  # Toutes les 30 minutes
    },
    'send-lottery-notifications': {
        'task': 'base.tasks.send_lottery_notifications',
        'schedule': 300.0,  # Toutes les 5 minutes
    },
}
"""
